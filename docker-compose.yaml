version: "3.8"

volumes:
    grafana_data:
        driver: local
    prometheus_data:
        driver: local
    traefik_certs:
        driver: local


networks:
    homelab:
        driver: overlay    # Changed to overlay for swarm mode
    traefik-public:
        driver: overlay
        attachable: true

secrets:
    traefik_duckdns_token:
        external: true    # Will be managed through Portainer
    traefik_acme_email:
        external: true    # Will be managed through Portainer

services:
    grafana:
        image: grafana/grafana:latest
        hostname: hp-server-grafana
        networks:
            - homelab
        volumes:
            - grafana_data:/var/lib/grafana:rw
            - ./grafana/provisioning:/etc/grafana/provisioning:rw
        ports:
            - "3000:3000"
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        healthcheck:
            test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            
    cadvisor:
        image: gcr.io/cadvisor/cadvisor
        hostname: hp-server-cadvisor-exporter
        networks:
            - homelab
        ports:           # Changed expose to ports
            - "8080:8080"
        command:
            - "-housekeeping_interval=15s"
            - "-docker_only=true"
            - "-store_container_labels=false"
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:ro
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
            - /dev/disk/:/dev/disk:ro
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        
    speedtest-exporter:
        image: miguelndecarvalho/speedtest-exporter
        hostname: hp-server-speedtest-exporter
        networks:
            - homelab
        ports:           # Changed expose to ports
            - "9798:9798"
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure

    node_exporter:
        image: quay.io/prometheus/node-exporter:latest
        hostname: hp-server-node-exporter
        command:
        - '--path.rootfs=/host'
        networks:
            - homelab
        ports:           # Changed expose to ports
            - "9100:9100"
        pid: host
        restart: unless-stopped
        volumes:
        - '/:/host:ro,rslave'
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure


    prometheus:
        image: prom/prometheus:latest
        hostname: hp-server-prometheus
        user: "nobody"
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--storage.tsdb.retention.time=15d"
        networks:
            - homelab
        ports:
            - "9090:9090"
        volumes:
            - prometheus_data:/prometheus:rw
            - ./prometheus:/etc/prometheus/:rw
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        healthcheck:
            test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
            interval: 30s
            timeout: 10s
            retries: 3

    net-tools:
        image: someguy123/net-tools
        networks:
            - homelab
        tty: true
        stdin_open: true
        ports:
            - "127.0.0.1:2222:22"
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure

    traefik:
        image: traefik:v2.10
        command:
            - "--api.dashboard=true"
            - "--api.insecure=false"
            - "--providers.docker=true"
            - "--providers.docker.swarmMode=true"
            - "--providers.docker.exposedbydefault=false"
            - "--providers.docker.network=traefik-public"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.websecure.address=:443"
            - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
            - "--certificatesresolvers.duckdns.acme.dnschallenge=true"
            - "--certificatesresolvers.duckdns.acme.dnschallenge.provider=duckdns"
            - "--certificatesresolvers.duckdns.acme.storage=/certs/acme.json"
        ports:
            - "81:80"
            - "443:443"
            - "8081:8080"  # Dashboard
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock:ro"
            - "traefik_certs:/certs"
        secrets:
            - traefik_duckdns_token
            - traefik_acme_email
        environment:
            - "DUCKDNS_TOKEN_FILE=/run/secrets/traefik_duckdns_token"
            - "TRAEFIK_CERTIFICATESRESOLVERS_DUCKDNS_ACME_EMAIL_FILE=/run/secrets/acme_email"
        networks:
            - traefik-public
        deploy:
            placement:
                constraints:
                    - node.role == manager
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.dashboard.rule=Host(`traefik.dwarka.duckdns.org`)"
                - "traefik.http.routers.dashboard.service=api@internal"
                - "traefik.http.routers.dashboard.tls.certresolver=duckdns"
                - "traefik.http.routers.dashboard.entrypoints=websecure"
                - "traefik.http.services.dashboard.loadbalancer.server.port=8080"